name: Test cross repos

on: 
  workflow_dispatch:
  push:
    tags:
    - '*'
  pull_request:
    types: ['ready_for_review']
  repository_dispatch:
    types: [build_repo2]

    
#   workflow_dispatch:
#     inputs:
#       tag:
#         type: choice
#         description: 'Add tag latest/tag-name to the docker image'
#         required: true
#         options:
#         - 'main'
#         - 'v1.0.0'
#         default: true

jobs:
  build-and-push-latest:
    runs-on: ubuntu-22.04
    if: github.event_name == 'workflow_dispatch'
    steps:
          
      # We checkout all the repos required to build the Dockerfile 
      # They are cloned under $GITHUB_WORKSPACE
      # $GITHUB_WORKSPACE = /home/runner/work/repo1/repo1
      # repo1 = /home/runner/work/repo1/repo1/repo1
      # repo2 = /home/runner/work/repo1/repo1/repo2
      - name: Check out repo1
        uses: actions/checkout@v2
        with:
          path: repo1

      - name: Check out repo2
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CHECKOUT_REPOS }}
          repository: test-organization-token/repo2
          path: repo2          
            
      - name: Publish real to Github Container Registry
        uses: elgohr/Publish-Docker-Github-Action@main
        if: github.event_name == 'workflow_dispatch'
        with:
          name: test-organization-token/test-image
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          dockerfile: repo1/dockerfiles/Dockerfile 
          workdir: /home/runner/work/repo1/repo1
          #tag_names: true # we use tags/release by their git name (main branch pused as latest)
          #tag_semver: true # we remove the prefix "v" from the git tag      

  build-and-push-tag:
    runs-on: ubuntu-22.04
    if: github.event_name == 'push'
    steps:       
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: tag
               
#       - name: Set image tag from PR number
#         id: pr
#         if: github.event_name == 'pull_request'
#         run: |
#           PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
#           echo $PR_NUMBER
#           echo ::set-output name=docker_tag::$PR_NUMBER
          
      # We checkout all the repos required to build the Dockerfile 
      # They are cloned under $GITHUB_WORKSPACE
      # $GITHUB_WORKSPACE = /home/runner/work/repo1/repo1
      # repo1 = /home/runner/work/repo1/repo1/repo1
      # repo2 = /home/runner/work/repo1/repo1/repo2
      - name: Check out repo1
        uses: actions/checkout@v2
        with:
          path: repo1
          ref: ${{steps.tag.outputs.tag}}

      - name: Check out repo2
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CHECKOUT_REPOS }}
          repository: test-organization-token/repo2
          path: repo2          
          ref: ${{steps.tag.outputs.tag}}
        
      - name: Publish real to Github Container Registry
        uses: elgohr/Publish-Docker-Github-Action@main
        with:
          name: test-organization-token/test-image
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          dockerfile: repo1/dockerfiles/Dockerfile 
          workdir: /home/runner/work/repo1/repo1
          tag_names: true # we use tags/release by their git name (main branch pused as latest)
          #tag_semver: true # we remove the prefix "v" from the git tag
          
  build-and-push-pr:
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request'
    steps:                     
      - name: Set image tag from PR number
        id: pr
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          echo "pr number: $PR_NUMBER"
          echo "branch name: ${{github.head_ref}}"
          echo ::set-output name=docker_tag::$PR_NUMBER
      
      - name: Print PR number
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          echo "tag: ${{steps.pr.outputs.docker_tag}}"
          
      # We checkout all the repos required to build the Dockerfile 
      # They are cloned under $GITHUB_WORKSPACE
      # $GITHUB_WORKSPACE = /home/runner/work/repo1/repo1
      # repo1 = /home/runner/work/repo1/repo1/repo1
      # repo2 = /home/runner/work/repo1/repo1/repo2
      - name: Check out repo1
        uses: actions/checkout@v2
        with:
          path: repo1
          ref: ${{github.head_ref}}

      - name: Check out repo2
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CHECKOUT_REPOS }}
          repository: test-organization-token/repo2
          path: repo2          
          #ref: ${{github.head_ref}}
                
      - name: Publish real to Github Container Registry
        uses: elgohr/Publish-Docker-Github-Action@main
        if: github.event_name == 'pull_request'
        with:
          name: test-organization-token/test-image
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          dockerfile: repo1/dockerfiles/Dockerfile 
          workdir: /home/runner/work/repo1/repo1
          tags: ${{steps.pr.outputs.docker_tag}}
          
  build-and-push-pr-repo2:
    runs-on: ubuntu-22.04
    if: github.event_name == 'repository_dispatch'
    steps:                     
              
      # We checkout all the repos required to build the Dockerfile 
      # They are cloned under $GITHUB_WORKSPACE
      # $GITHUB_WORKSPACE = /home/runner/work/repo1/repo1
      # repo1 = /home/runner/work/repo1/repo1/repo1
      # repo2 = /home/runner/work/repo1/repo1/repo2
      - name: Check out repo1
        uses: actions/checkout@v2
        with:
          path: repo1

      - name: Check out repo2
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CHECKOUT_REPOS }}
          repository: test-organization-token/repo2
          path: repo2          
          ref: ${{ github.event.client_payload.branch }}
                
      - name: Publish real to Github Container Registry
        uses: elgohr/Publish-Docker-Github-Action@main
        with:
          name: test-organization-token/test-image
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          dockerfile: repo1/dockerfiles/Dockerfile 
          workdir: /home/runner/work/repo1/repo1
          tags: ${{ github.event.client_payload.pr_number }}
